name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 仅在推送标签时触发
    branches:
      - main  # 仅在主分支上触发
  workflow_dispatch:  # 允许手动触发工作流

permissions:
  contents: write  # 这允许工作流写入仓库内容，包括创建发布

jobs:
  build:
    name: 构建和发布
    runs-on: ubuntu-latest
    environment: dockerhub  # 指定使用dockerhub环境，这样可以访问该环境中的密钥
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'  # 与Dockerfile中一致的Go版本
          
      - name: 获取依赖
        run: go mod download
        
      - name: 安装CGO依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libc6-dev sqlite3 libsqlite3-dev
          # 安装ARM64交叉编译工具
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: 创建releases目录
        run: mkdir -p releases
      
      - name: 构建二进制文件
        run: |
          # 构建AMD64版本
          CGO_CFLAGS="-D_LARGEFILE64_SOURCE" GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -ldflags="-s -w" -o releases/nilbbs-amd64 main.go
          
          # 构建ARM64版本
          CGO_CFLAGS="-D_LARGEFILE64_SOURCE" CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o releases/nilbbs-arm64 main.go
          
          # 构建Windows版本
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o releases/nilbbs.exe main.go
          
          # 构建macOS ARM64版本
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w" -o releases/nilbbs-macos-arm64 main.go
          
          # 添加执行权限
          chmod +x releases/nilbbs-*

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 获取版本号
      - name: 获取版本号
        id: get_version
        run: |
          # 如果是标签推送，直接获取标签版本
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            # 去掉版本号前面的'v'（如果有）
            VERSION=${VERSION#v}
          else
            # 如果不是标签推送，则使用短提交哈希
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "版本号: $VERSION"

      - name: 登录到Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: 构建并推送多平台Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/nilbbs:${{ steps.get_version.outputs.VERSION }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/nilbbs:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 创建包含静态资源的发布包
        run: |
          # 为每个平台创建带有静态资源的压缩包
          # Linux AMD64
          mkdir -p nilbbs-linux-amd64
          cp releases/nilbbs-amd64 nilbbs-linux-amd64/nilbbs
          cp -r assets static templates nilbbs-linux-amd64/
          tar -czf releases/nilbbs-linux-amd64.tar.gz -C nilbbs-linux-amd64 .
          
          # Linux ARM64
          mkdir -p nilbbs-linux-arm64
          cp releases/nilbbs-arm64 nilbbs-linux-arm64/nilbbs
          cp -r assets static templates nilbbs-linux-arm64/
          tar -czf releases/nilbbs-linux-arm64.tar.gz -C nilbbs-linux-arm64 .
          
          # Windows
          mkdir -p nilbbs-windows
          cp releases/nilbbs.exe nilbbs-windows/
          cp -r assets static templates nilbbs-windows/
          zip -r releases/nilbbs-windows.zip nilbbs-windows/
          
          # macOS ARM64
          mkdir -p nilbbs-macos-arm64
          cp releases/nilbbs-macos-arm64 nilbbs-macos-arm64/nilbbs
          cp -r assets static templates nilbbs-macos-arm64/
          tar -czf releases/nilbbs-macos-arm64.tar.gz -C nilbbs-macos-arm64 .

      - name: 发布到GitHub Releases
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            releases/nilbbs-linux-amd64.tar.gz
            releases/nilbbs-linux-arm64.tar.gz
            releases/nilbbs-windows.zip
            releases/nilbbs-macos-arm64.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 上传构建产物（非标签推送）
        uses: actions/upload-artifact@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          name: nilbbs-builds
          path: |
            releases/nilbbs-amd64
            releases/nilbbs-arm64
            releases/nilbbs.exe
            releases/nilbbs-macos-arm64